{"version":3,"sources":["components/Header/index.js","components/Description/index.js","components/Images/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","score","topScore","Description","Images","alt","name","src","image","id","onClick","handleClick","Wrapper","children","App","state","characters","clickedImages","includes","setState","alert","push","console","log","length","i","j","Math","floor","random","this","map","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qjEAmBeA,MAhBf,SAAgBC,GACZ,OAAO,yBAAKC,UAAU,kBACtB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,YACX,wBAAIA,UAAU,cAAd,gBAEJ,yBAAKA,UAAU,YACX,wBAAIA,UAAU,SAAd,6BAEJ,yBAAKA,UAAU,YACX,sCAAYD,EAAME,MAAlB,iBAAuCF,EAAMG,c,YCM1CC,MAhBf,WACI,OAAO,yBAAKH,UAAU,8BAClB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,wBACf,8CAGJ,yBAAKA,UAAU,OACX,yBAAKA,UAAU,wBACf,4G,MCCGI,MAVf,SAAgBL,GACZ,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACf,yBAAKK,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,MAAOC,GAAIV,EAAMU,GAAIC,QAAS,kBAAMX,EAAMY,YAAYZ,EAAMU,U,OCF1FG,G,MAFC,SAAAb,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMc,YCoE1CC,E,2MA7DbC,MAAQ,CACNC,aACAC,cAAe,GACfhB,MAAO,EACPC,SAAU,G,EAGZS,YAAc,SAAAF,GACZ,IAAIQ,EAAgB,EAAKF,MAAME,cAE/B,GAAGA,EAAcC,SAAST,GAKxB,OAJA,EAAKU,SAAS,CAAEF,cAAe,GAAIhB,MAAO,IACtC,EAAKc,MAAMd,MAAQ,EAAKc,MAAMb,UAChC,EAAKiB,SAAS,CAAEjB,SAAU,EAAKa,MAAMd,QAEhCmB,MAAM,qDAEbH,EAAcI,KAAKZ,GACnBa,QAAQC,IAAIN,GAEZ,EAAKE,SAAS,CAAEH,aAAYC,gBAAehB,MAAOgB,EAAcO,SAEhE,IAAK,IAAIC,EAAIT,EAAWQ,OAAS,EAAGC,EAAI,EAAGA,IAAK,CAC9C,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADM,EAEb,CAACT,EAAWU,GAAIV,EAAWS,IAA3DT,EAAWS,GAFkC,KAE9BT,EAAWU,GAFmB,O,wEAa1C,IAAD,OACP,OACE,6BACC,kBAAC,EAAD,CACAzB,MAAO6B,KAAKf,MAAMd,MAClBC,SAAU4B,KAAKf,MAAMb,WAErB,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE4B,KAAKf,MAAMC,WAAWe,KAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACEvB,GAAIuB,EAAUvB,GACdwB,IAAKD,EAAUvB,GACfD,MAAOwB,EAAUxB,MACjBG,YAAa,EAAKA,uB,GAnDZuB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fee5bf26.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n    return <div className=\"container-flex\">\n    <div className=\"row header\">\n        <div className=\"col-md-4\">\n            <h2 className=\"clickyGame\">Clicky Game</h2>   \n        </div>\n        <div className=\"col-md-4\">\n            <h1 className=\"title\">Click an image to begin!</h1>\n        </div>\n        <div className=\"col-md-4\">\n            <h2>Score: {props.score} | Top Score: {props.topScore}</h2>\n        </div> \n    </div>\n    </div>\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Description() {\n    return <div className=\"container-flex description\">\n        <div className=\"row\">\n            <div className=\"col-md-12 centerText\">\n            <h1>Clicky Game!</h1>\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"col-md-12 centerText\">\n            <h3>Click on an image to earn points, but don't click on any more than once!</h3>\n        </div>\n        </div>\n        \n    </div>\n}\n\nexport default Description","import React from \"react\";\nimport \"./Images.css\";\n\nfunction Images(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n            <img alt={props.name} src={props.image} id={props.id} onClick={() => props.handleClick(props.id)}/>\n            </div>\n        </div>\n    )\n};\n\nexport default Images;\n\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport Header from \"./components/Header\"\nimport './App.css';\nimport Description from './components/Description';\nimport Images from './components/Images';\nimport characters from \"./characters.json\"\nimport Wrapper from \"./components/Wrapper/index\"\n\nclass App extends Component {\n  // Setting this.state.pups to the cards json array\n  state = {\n    characters,\n    clickedImages: [],\n    score: 0,\n    topScore: 0\n  };\n\n  handleClick = id => {\n    let clickedImages = this.state.clickedImages;\n\n    if(clickedImages.includes(id)){\n      this.setState({ clickedImages: [], score: 0});\n      if (this.state.score > this.state.topScore) {\n        this.setState({ topScore: this.state.score})\n      }\n      return alert('Oh No!  You already clicked that one.  Try again!')\n    }else{\n      clickedImages.push(id)\n      console.log(clickedImages)\n\n      this.setState({ characters, clickedImages, score: clickedImages.length});\n\n      for (let i = characters.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [characters[i], characters[j]] = [characters[j], characters[i]];\n      }\n    }\n  }\n\n\n   \n\n    \n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div>\n       <Header \n       score={this.state.score}\n       topScore={this.state.topScore}\n       />\n       <Description />\n       <Wrapper>\n        {this.state.characters.map(character => (\n          <Images\n            id={character.id}\n            key={character.id}\n            image={character.image}\n            handleClick={this.handleClick}\n          />\n        ))}\n      </Wrapper>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}